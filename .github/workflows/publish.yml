name: Publish to npm

on:
  pull_request:
    # PR 이벤트 중 closed 일 때만 트리거
    types:
      - closed
    # PR의 타깃 브랜치가 main일 때만 동작
    branches:
      - main

jobs:
  publish:
    # closed > merged branch  일 때만 동작
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      # Repository 체크아웃.
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Repository의 (커밋, 태그) 이력을 모두 가져온다.
          fetch-depth: 0

      # Node.js 환경 세팅.
      # npm registry를 공식 레지스트리로 지정.
      # (setup-node가 .npmrc를 잡아줘서 이후 npm publish 시 토큰 사용 가능)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org/'

      # 의존성 설치.
      # lockfile 불일치 시 실패하도록 고정.
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # (브랜치명에서) 버전 추출.
      # - 허용 형태: 'root/x.y.z'로 시작하는 모든 브랜치 ( ex) root/1.2.3-alpha )
      # - 매칭 실패 시 'skip=true' 출력하고 정상 종료(exit 0)해서 이후 스텝들이 조건문으로 스킵되게 함.
      - name: Extract version from branch name
        id: version
        run: |
          BRANCH_NAME="${GITHUB_HEAD_REF}"
          VERSION=$(echo "$BRANCH_NAME" | sed -n 's/^root\/\([0-9]*\.[0-9]*\.[0-9]*\).*$/\1/p')
          if [ -z "$VERSION" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # git identity 설정 (commit, tag push 시 필요)
      - name: Setup git identity
        if: steps.version.outputs.skip != 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # package.json 버전 갱신 + git 태그 생성
      - name: Update version
        if: steps.version.outputs.skip != 'true'
        run: |
          npm version ${{ steps.version.outputs.version }} -m "CHORE: (release) %s"

      # 버전 커밋 + 태그 push
      - name: Push version commit and tag
        if: steps.version.outputs.skip != 'true'
        run: git push origin main --follow-tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 빌드.
      - name: Build
        if: steps.version.outputs.skip != 'true'
        run: yarn build

      # 배포.
      # - Github Repository Secret 에 환경변수(NPM_TOKEN)가 설정되어 있어야 함.
      # - package.json에 "name"과 "version" 정상 지정.
      # - private: true면 publish 불가.
      # - 스코프 패키지(@scope/name)를 public로 배포하려면 --access public 필요.
      - name: Publish
        if: steps.version.outputs.skip != 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public

      # GitHub Release 작성.
      - name: Create GitHub Release
        if: steps.version.outputs.skip != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          generate_release_notes: true
