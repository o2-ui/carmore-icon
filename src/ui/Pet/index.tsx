import type { AriaRole, SVGProps } from 'react';

import React from 'react';

import style from './style.module.scss';

import { getElementClass, getElementId, mergeClassNames } from '@/util/string-helper';

type StateType = 'on' | 'off';

type Props = SVGProps<SVGSVGElement> & {
  state?: StateType;
};

/**
 * @description SVG 아이콘 ('반려동물') 을 랜더링합니다.
 * @param props - SVGProps를 상속받은 props 객체.
 * @param {string} [props.className] - css 클래스.
 * @param {StateType} [props.state = 'off'] - 아이콘 활성여부. (기본값: 'off')
 * @param {string} [props.width='1.5rem'] - 너비. (기본값: '1.5rem')
 * @param {string} [props.height='1.5rem'] - 높이. (기본값: '1.5rem')
 */
const Pet = (props: Props) => {
  const { className, state = 'off', width, height, role, 'aria-label': ariaLabel, ...rest } = props;

  const isOn = state === 'on';

  const iconWidth: string | number = width || '1.5rem';
  const iconHeight: string | number = height || '1.5rem';
  const iconClass = getElementClass('Pet');
  const iconStateClass = isOn ? style['layout--on'] : style['layout--off'];

  /* a11y 기본설정 */
  const iconRole: AriaRole = role || 'img';
  const titleId = getElementId('PetTitle');
  const titleText = ariaLabel || '반려동물';

  return (
    <svg
      className={mergeClassNames(iconClass, iconStateClass, className)}
      width={iconWidth}
      height={iconHeight}
      xmlns={'http://www.w3.org/2000/svg'}
      preserveAspectRatio={'xMidYMid meet'}
      viewBox={'0 0 24 24'}
      role={iconRole}
      aria-labelledby={titleId}
      {...rest}
    >
      <title id={titleId}>{titleText}</title>
      <path d={'M4.5 11.25C5.74264 11.25 6.75 10.2426 6.75 9C6.75 7.75736 5.74264 6.75 4.5 6.75C3.25736 6.75 2.25 7.75736 2.25 9C2.25 10.2426 3.25736 11.25 4.5 11.25Z'} fill={'currentColor'} />
      <path d={'M9 7.5C10.2426 7.5 11.25 6.49264 11.25 5.25C11.25 4.00736 10.2426 3 9 3C7.75736 3 6.75 4.00736 6.75 5.25C6.75 6.49264 7.75736 7.5 9 7.5Z'} fill={'currentColor'} />
      <path d={'M15 7.5C16.2426 7.5 17.25 6.49264 17.25 5.25C17.25 4.00736 16.2426 3 15 3C13.7574 3 12.75 4.00736 12.75 5.25C12.75 6.49264 13.7574 7.5 15 7.5Z'} fill={'currentColor'} />
      <path
        d={'M19.5 11.25C20.7426 11.25 21.75 10.2426 21.75 9C21.75 7.75736 20.7426 6.75 19.5 6.75C18.2574 6.75 17.25 7.75736 17.25 9C17.25 10.2426 18.2574 11.25 19.5 11.25Z'}
        fill={'currentColor'}
      />
      <path
        fillRule={'evenodd'}
        clipRule={'evenodd'}
        d={
          'M12.5657 10.7442C12.6446 10.7591 12.7234 10.7814 12.8023 10.8113C13.3043 10.9901 13.7274 11.3924 14.0572 11.7947C14.4617 12.2819 14.8221 12.7231 15.1929 13.1773C15.4006 13.4316 15.6117 13.69 15.8356 13.9628C15.8915 14.0209 15.9481 14.0793 16.0052 14.1382C16.9075 15.0689 17.9163 16.1096 17.7073 17.5391C17.4993 18.2916 16.9758 19.0516 16.0364 19.2677C15.7955 19.3157 15.3116 19.25 14.686 19.1652C13.9523 19.0657 13.0237 18.9398 12.0637 18.9398H11.9346C10.9828 18.9398 10.0617 19.0658 9.33089 19.1657C8.69632 19.2524 8.2052 19.3196 7.96191 19.2677C7.02251 19.0516 6.49903 18.2991 6.29107 17.5391C6.08883 16.1173 7.09703 15.0773 7.99902 14.1469C8.05651 14.0876 8.11358 14.0288 8.16987 13.9703C8.57436 13.4832 8.93466 13.042 9.30554 12.5878C9.51326 12.3334 9.72429 12.075 9.94827 11.8022C10.2853 11.3998 10.7012 10.9975 11.2032 10.8187C11.2821 10.7889 11.361 10.7665 11.4398 10.7516C11.6263 10.7144 11.8199 10.7144 12.0063 10.7144C12.1928 10.7144 12.3864 10.7144 12.5657 10.7442ZM11.0938 9.07063C11.4585 8.99896 11.8072 8.9997 11.9757 9.00006C11.9867 9.00008 11.9969 9.0001 12.0063 9.0001C12.0158 9.0001 12.0259 9.00009 12.0368 9.00007C12.204 8.9998 12.5313 8.99928 12.8633 9.05447L12.883 9.05773L12.9025 9.06142C13.084 9.0957 13.2585 9.14529 13.4252 9.20727C14.3766 9.55108 15.0426 10.2457 15.434 10.7223C15.841 11.2126 16.2087 11.6628 16.582 12.1199C16.7749 12.3561 16.9692 12.5941 17.1713 12.8403C17.2065 12.8767 17.2433 12.9146 17.2816 12.954C17.6931 13.377 18.2672 13.967 18.6993 14.6319C19.226 15.4424 19.6415 16.5006 19.4544 17.7803L19.4393 17.8832L19.4116 17.9836C19.1057 19.0904 18.2396 20.5226 16.443 20.9358L16.4171 20.9418L16.391 20.947C15.9596 21.0329 15.5016 20.9895 15.264 20.9657C15.0123 20.9405 14.7175 20.9005 14.4335 20.8619C14.3813 20.8548 14.3295 20.8478 14.2784 20.8409C13.5768 20.7464 12.8202 20.6541 12.0637 20.6541H11.9346C11.1801 20.6541 10.4254 20.7478 9.72229 20.8434C9.6761 20.8497 9.62933 20.8561 9.58221 20.8625C9.29286 20.9021 8.99058 20.9435 8.73195 20.9691C8.49381 20.9926 8.02568 21.0365 7.58314 20.942L7.56922 20.939L7.55535 20.9358C5.76313 20.5236 4.89318 19.1034 4.58566 17.9795L4.55785 17.8779L4.54303 17.7738C4.36146 16.4972 4.7808 15.4424 5.30705 14.6358C5.73899 13.9738 6.3116 13.3852 6.72295 12.9624C6.76274 12.9215 6.80102 12.8821 6.83752 12.8444C7.22127 12.3818 7.56174 11.9649 7.91648 11.5305C8.12503 11.2751 8.33852 11.0136 8.56864 10.7333L8.57407 10.7267L8.57958 10.7201C8.95961 10.2665 9.6209 9.56155 10.58 9.21483C10.744 9.15385 10.9155 9.10486 11.0938 9.07063Z'
        }
        fill={'currentColor'}
      />
      {!isOn && <path className={style.forbidden} d={'M2 2L22 22'} strokeWidth={2} strokeLinecap={'round'} strokeLinejoin={'round'} />}
    </svg>
  );
};

export default Pet;
